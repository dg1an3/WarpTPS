{"version":3,"sources":["logo.svg","Container/ImageOps.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","ImageOpsContainer","props","state","transforms","e","value","key","transform","this","getUpdatedTransform","setState","newTransforms","filter","push","map","tranform","effect","gravity","crop","default","type","console","log","find","getRBBCons","getHSVCons","keys","indexOf","red","blue","green","hue","saturation","Container","maxWidth","Grid","container","spacing","item","xs","Card","CardContent","Typography","variant","color","component","sign_url","publicId","cloudName","getTransformations","Box","paragraph","align","getSliderValue","min","max","keyLabel","keyValue","updateColorValue","Button","onClick","resetFilters","createRGBEffect","createHSVEffect","createAdvanceEffects","React","Component","SliderComponent","id","gutterBottom","Slider","defaultValue","getAriaValueText","valuetext","aria-labelledby","valueLabelDisplay","step","marks","onChange","App","className","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.7546b82b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\r\n\r\nimport Container from '@material-ui/core/Container';\r\nimport Grid from '@material-ui/core/Grid';\r\n\r\nimport Card from '@material-ui/core/Card';\r\nimport CardHeader from '@material-ui/core/CardHeader';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Slider from '@material-ui/core/Slider';\r\n\r\nimport {Image, Video, Transformation, CloudinaryContext} from 'cloudinary-react';\r\nimport Box from '@material-ui/core/Box';\r\nimport Button from '@material-ui/core/Button';\r\n\r\nexport default class ImageOpsContainer extends React.Component {\r\n   \r\n    constructor(props) {\r\n        super(props);\r\n        \r\n        this.state = {\r\n            transforms: []\r\n        }\r\n    }\r\n\r\n    updateColorValue(e, value, key) {\r\n        const transform = {\r\n            key,\r\n            value\r\n        }\r\n\r\n        const transforms = this.getUpdatedTransform(this.state.transforms, transform);\r\n        this.setState({transforms});\r\n    }\r\n\r\n    getUpdatedTransform(transforms, transform) {\r\n        const newTransforms = transforms.filter(({key}) => key !== transform.key)\r\n        newTransforms.push(transform);\r\n        return newTransforms\r\n    }\r\n    \r\n    getTransformations() {\r\n        return this.state.transforms.map((tranform) => {\r\n            return ( <Transformation effect={`${tranform.key}:${tranform.value}`} gravity=\"center\" crop=\"fill\" />)\r\n        })\r\n    }\r\n\r\n    getRBBCons() {\r\n        return [\r\n            {key: \"Red\", value: \"red\", default: 0},\r\n            {key: \"Green\", value: \"green\", default: 0},\r\n            {key: \"Blue\", value: \"blue\", default: 0}\r\n        ]\r\n    }\r\n\r\n    getHSVCons() {\r\n        return [\r\n            {key: \"Hue\", value: \"hue\", default: 80},\r\n            {key: \"Saturation\", value: \"saturation\", default: 80},\r\n            {key: \"Value\", value: \"brightness\", default: 80},\r\n        ]\r\n    }\r\n\r\n    getSliderValue(key, type) {\r\n        console.log(\"Transforms : \", this.state.transforms, key, type);\r\n        const transform = this.state.transforms.find((transform) => transform.key === key);\r\n        console.log(\"Transform \", transform);\r\n        if (transform) {\r\n            return transform.value;\r\n        }\r\n\r\n        if (type == \"rgb\") {\r\n            return this.getRBBCons().find((transform) => transform.value === key).default;\r\n        } else if (type == \"hsv\") {\r\n            return this.getHSVCons().find((transform) => transform.value === key).default;\r\n        }\r\n    }\r\n\r\n    resetFilters(keys) {\r\n        const newTransforms = this.state.transforms.filter(({key}) => keys.indexOf(key) < 0)\r\n        // if(this.state.transforms.length > newTransforms.length) {\r\n        this.setState({ transforms: newTransforms });\r\n        // }\r\n    }\r\n\r\n    createRGBEffect(type) {\r\n        const red = {key: \"red\", value: 0}\r\n        const blue = {key: \"blue\", value: 0}\r\n        const green = {key: \"green\", value: 0}\r\n\r\n        switch(type) {\r\n            case \"all_red\":\r\n                red.value = 100;\r\n                break;\r\n            case \"all_blue\":\r\n                blue.value = 100;\r\n                break;\r\n            case \"all_green\":\r\n                green.value = 100;\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n\r\n        let transforms = this.state.transforms;\r\n\r\n        transforms = this.getUpdatedTransform(transforms, red);\r\n        transforms = this.getUpdatedTransform(transforms, blue);\r\n        transforms = this.getUpdatedTransform(transforms, green);\r\n\r\n        this.setState({transforms})\r\n    }\r\n\r\n    createHSVEffect(type) {\r\n        const hue = {key: \"hue\", value: 80}\r\n        const saturation = {key: \"saturation\", value: 80}\r\n\r\n        switch(type) {\r\n            case \"grayscale\":\r\n                saturation.value = -70;\r\n                break;\r\n            case \"sepia\":\r\n                hue.value = 20;\r\n                saturation.value = -20\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n\r\n        let transforms = this.state.transforms;\r\n\r\n        // transforms = this.getUpdatedTransform(transforms, hue);\r\n        if(type == \"grayscale\") {\r\n            transforms = this.getUpdatedTransform(transforms, saturation);\r\n        } else if(type == \"sepia\") {\r\n            transforms = this.getUpdatedTransform(transforms, hue);\r\n            transforms = this.getUpdatedTransform(transforms, saturation);\r\n        }\r\n\r\n        this.setState({transforms})\r\n    }\r\n\r\n    createAdvanceEffects(type) {\r\n        let transforms = this.state.transforms;\r\n        switch(type) {\r\n            case \"cartoon\":\r\n                const transform = {\r\n                    key: \"cartoonify\",\r\n                    value: \"20:60\"\r\n                }\r\n                transforms = this.getUpdatedTransform(transforms, transform);\r\n                break;\r\n            case \"vignette\":\r\n                const transform_v = {\r\n                    key: \"vignette\",\r\n                    value: \"30\"\r\n                }\r\n                transforms = this.getUpdatedTransform(transforms, transform_v);\r\n                break;\r\n            case \"oil_painting\":\r\n                const transform_p = {\r\n                    key: \"oil_paint\",\r\n                    value: \"40\"\r\n                }\r\n                transforms = this.getUpdatedTransform(transforms, transform_p);\r\n                break;\r\n            case \"vibrance\":\r\n                const transform_vb = {\r\n                    key: \"vibrance\",\r\n                    value: \"70\"\r\n                }\r\n                transforms = this.getUpdatedTransform(transforms, transform_vb);\r\n                break;\r\n            default:\r\n                break;\r\n\r\n        }\r\n\r\n        this.setState({transforms});\r\n    }\r\n\r\n    render() {\r\n        console.log(\"Transformations : \", this.state.transforms);\r\n        return (\r\n            <Container  maxWidth=\"md\">\r\n                <Grid container spacing={2}>\r\n                    <Grid item xs={6}>\r\n                       <Card>\r\n                            <CardContent>\r\n                                <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\r\n                                    Input image\r\n                                </Typography>\r\n                                <Image sign_url={true} publicId=\"leena\" cloudName=\"rakesh111\" >\r\n                                </Image>\r\n                            </CardContent>\r\n                       </Card>\r\n                    </Grid>\r\n                    <Grid item xs={6}>\r\n                        <Card>\r\n                            <CardContent>\r\n                                <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\r\n                                    Output Image\r\n                                </Typography>\r\n                                <Image publicId=\"leena\" cloudName=\"rakesh111\" >\r\n                                    {this.getTransformations()}\r\n                                </Image>\r\n                            </CardContent>\r\n                        </Card>\r\n                    </Grid>\r\n                    <Grid item xs={6}>\r\n                        <Card>\r\n                            <CardContent>\r\n                                <Box color=\"text.primary\">\r\n                                    <Typography paragraph={true} variant=\"h5\" align=\"left\" component=\"h5\">\r\n                                        R-G-B Controls\r\n                                    </Typography>\r\n\r\n                                    {this.getRBBCons().map((color) => {\r\n                                        return (\r\n                                            <SliderComponent getSliderValue={(key) => this.getSliderValue(key, \"rgb\")} \r\n\t\t\t\t\t\tdefault={0} \r\n\t\t\t\t\t\tmin={-100} max={100} \r\n\t\t\t\t\t\tkeyLabel={color.key} \r\n\t\t\t\t\t\tkeyValue={color.value} \r\n                                                updateColorValue={(e, value, key) => this.updateColorValue(e, value, key)}  />\r\n                                        )\r\n                                    })}\r\n\r\n                                    <Button variant=\"contained\" align=\"left\" onClick={() => this.resetFilters([\"red\", \"green\", \"blue\"])} color=\"primary\">\r\n                                        Reset\r\n                                    </Button>\r\n                                \r\n                                </Box>\r\n                            </CardContent>\r\n                        </Card>\r\n                    </Grid>\r\n                    <Grid item xs={6}>\r\n                        <Card item xs={6}>\r\n                            <CardContent>\r\n                                <Box color=\"text.primary\">\r\n                                    <Typography paragraph={true} variant=\"h5\" align=\"left\" component=\"h5\">\r\n                                        R-G-B Based Filters\r\n                                    </Typography>\r\n                                    \r\n                                    <Button variant=\"contained\" align=\"left\" onClick={() => this.createRGBEffect(\"all_blue\")} >\r\n                                        Fill Blue\r\n                                    </Button>\r\n                                    <Button variant=\"contained\" align=\"left\" onClick={() => this.createRGBEffect(\"all_red\")} >\r\n                                        Fill Red\r\n                                    </Button>\r\n                                    <Button variant=\"contained\" align=\"left\" onClick={() => this.createRGBEffect(\"all_green\")}>\r\n                                        Fill Green\r\n                                    </Button>\r\n                                    <Button variant=\"contained\" align=\"left\" onClick={() => this.resetFilters([\"red\", \"green\", \"blue\"])} color=\"primary\">\r\n                                        Reset\r\n                                    </Button>\r\n                                \r\n                                </Box>\r\n                            </CardContent>\r\n                        </Card>\r\n                    </Grid>\r\n\r\n                    <Grid item xs={6}>\r\n                        <Card>\r\n                            <CardContent>\r\n                                <Box color=\"text.primary\">\r\n                                    <Typography paragraph={true} variant=\"h5\" align=\"left\" component=\"h5\">\r\n                                        H-S-V Controls\r\n                                    </Typography>\r\n\r\n                                    {this.getHSVCons().map((color) => {\r\n                                        return (\r\n                                            <SliderComponent getSliderValue={(key) => this.getSliderValue(key, \"hsv\")} default={0} min={-100} max={100} keyLabel={color.key} keyValue={color.value} \r\n                                                updateColorValue={(e, value, key) => this.updateColorValue(e, value, key)}  />\r\n                                        )\r\n                                    })}\r\n\r\n                                    <Button variant=\"contained\" align=\"left\" onClick={() => this.resetFilters([\"hue\", \"saturation\", \"brightness\"])} color=\"primary\">\r\n                                        Reset\r\n                                    </Button>\r\n                                  \r\n                                </Box>\r\n                            </CardContent>\r\n                        </Card>\r\n                    </Grid>\r\n                    <Grid item xs={6}>\r\n                        <Card item xs={6}>\r\n                            <CardContent>\r\n                                <Box color=\"text.primary\">\r\n                                    <Typography paragraph={true} variant=\"h5\" align=\"left\" component=\"h5\">\r\n                                        H-S-V Based Filters\r\n                                    </Typography>\r\n                                    \r\n                                    <Button variant=\"contained\" align=\"left\" onClick={() => this.createHSVEffect(\"grayscale\")} >\r\n                                        Gray Scale\r\n                                    </Button>\r\n                                    <Button variant=\"contained\" align=\"left\" onClick={() => this.createHSVEffect(\"sepia\")} >\r\n                                        Sepia\r\n                                    </Button>\r\n                                    <Button variant=\"contained\" align=\"left\" onClick={() => this.resetFilters([\"hue\", \"saturation\", \"brightness\"])} color=\"primary\">\r\n                                        Reset\r\n                                    </Button>\r\n                                \r\n                                </Box>\r\n                            </CardContent>\r\n                        </Card>\r\n                    </Grid>\r\n                    <Grid xs={12}>\r\n                        <Card item xs={6}>\r\n                            <CardContent>\r\n                                <Box color=\"text.primary\">\r\n                                    <Typography paragraph={true} variant=\"h5\" align=\"left\" component=\"h5\">\r\n                                        Advance Filters By Cloudinary\r\n                                    </Typography>\r\n                                    \r\n                                    <Button variant=\"contained\" align=\"left\" onClick={() => this.createAdvanceEffects(\"cartoon\")} >\r\n                                        Cartoonify\r\n                                    </Button>\r\n                                    <Button variant=\"contained\" align=\"left\" onClick={() => this.createAdvanceEffects(\"vignette\")} >\r\n                                        Vignette\r\n                                    </Button>\r\n\r\n                                    <Button variant=\"contained\" align=\"left\" onClick={() => this.createAdvanceEffects(\"oil_painting\")} >\r\n                                        Oil Painting\r\n                                    </Button>\r\n\r\n                                    <Button variant=\"contained\" align=\"left\" onClick={() => this.createAdvanceEffects(\"vibrance\")} >\r\n                                        vibrance\r\n                                    </Button>\r\n\r\n                                    <Button variant=\"contained\" align=\"left\" onClick={() => this.resetFilters([\"vignette\", \"cartoonify\", \"vibrance\", \"oil_paint\"])} color=\"primary\">\r\n                                        Reset\r\n                                    </Button>\r\n                                \r\n                                </Box>\r\n                            </CardContent>\r\n                        </Card>\r\n                    </Grid>\r\n                </Grid>\r\n                \r\n            </Container>\r\n        )\r\n    }\r\n}\r\n\r\nclass SliderComponent extends React.Component {\r\n    valuetext(value) {\r\n        return `${value}°C`;\r\n    }\r\n    render() {\r\n        console.log(this.props.getSliderValue(this.props.keyValue));\r\n        return (\r\n            <div>\r\n                <Typography id=\"discrete-slider\" align=\"left\" gutterBottom>\r\n                    {this.props.keyLabel}\r\n                </Typography>\r\n                <Slider\r\n                    defaultValue={this.props.default}\r\n                    getAriaValueText={this.valuetext}\r\n                    aria-labelledby=\"discrete-slider\"\r\n                    valueLabelDisplay=\"auto\"\r\n                    step={10}\r\n                    value={this.props.getSliderValue(this.props.keyValue)}\r\n                    marks\r\n                    min={this.props.min}\r\n                    max={this.props.max}\r\n                    onChange={(e, value) => this.props.updateColorValue(e, value, this.props.keyValue)}\r\n                />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nimport ImageOpsContainer from './Container/ImageOps';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <ImageOpsContainer />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}